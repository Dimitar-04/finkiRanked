generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model comments {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateCreated    DateTime     @default(now()) @db.Timestamptz(6)
  post_id        String?      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content        String?      @default("")
  author_id      String?      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  author_name    String?
  users          users?       @relation(fields: [author_id], references: [id], onDelete: Cascade, map: "comments_author_id_fkey")
  to_be_reviewed forum_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "comments_to_be_reviewed_post_id_fkey")
}

model to_be_reviewed {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String?
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  content       String?
  author_id     String?     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  author_name   String?
  comment_count Int?        @default(0) @db.SmallInt
  topic         String?
  challenge_id  String?     @db.Uuid
  users         users?      @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "to_be_reviewed_author_id_fkey")
  challenges    challenges? @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([author_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model forum_posts {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String      @default("")
  content       String?     @default("")
  author_id     String?     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  author_name   String?
  date_created  DateTime?   @default(now()) @db.Date
  comment_count Int         @default(0)
  topic         String?
  challenge_id  String?     @db.Uuid
  comments      comments[]
  users         users?      @relation(fields: [author_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "forum_posts_author_id_fkey")
  challenges    challenges? @relation(fields: [challenge_id], references: [id], onUpdate: NoAction)

  @@index([challenge_id], map: "idx_forum_posts_challenge_id")
}

model users {
  id                   String           @id @default(dbgenerated("auth.uid()")) @db.Uuid
  username             String           @unique
  email                String           @unique
  name                 String?
  solved_problems      BigInt?          @default(0)
  rank                 String?          @default("Novice")
  points               BigInt?          @default(0)
  postCounter          Int?             @default(3) @db.SmallInt
  postCheckCounter     Int?             @default(0) @db.SmallInt
  isModerator          Boolean          @default(false)
  attempts             Int?             @default(0) @db.SmallInt
  solvedDailyChallenge Boolean?
  daily_test_case_id   String?          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  daily_points         Int?             @default(0) @db.SmallInt
  comments             comments[]
  forum_posts          forum_posts[]
  to_be_reviewed       to_be_reviewed[]

  @@index([points(sort: Desc)])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model challenges {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  solving_date   DateTime         @db.Date
  title          String?
  content        String?
  attempted_by   Int?             @db.SmallInt
  solved_by      Int?             @db.SmallInt
  expired        Boolean?
  examples       Json?
  output_type    String?
  difficulty     String?
  forum_posts    forum_posts[]
  test_cases     test_cases[]
  to_be_reviewed to_be_reviewed[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model test_cases {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  challenge_id String     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  input        String?
  output       String?
  challenges   challenges @relation(fields: [challenge_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model leaderboard_cache {
  cache_key String  @id
  data      Json?
  timestamp BigInt?
}
