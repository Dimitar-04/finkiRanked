[
  {
    "title": "a-phone-code",
    "description": "Your task is to calculate the length of the longest common starting sequence (prefix) among a list of phone numbers, which represents the city's phone code.",
    "examples": [
      {
        "input": "3\n007\n00123\n00124",
        "output": "2"
      },
      {
        "input": "4\n12345\n123\n123987\n123456",
        "output": "3"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "acronyms",
    "description": "Develop a function that takes a sentence and converts it into its acronym by taking the first letter of each word.",
    "examples": [
      {
        "input": "Programming Challenges is really cool",
        "output": "PCIRC"
      },
      {
        "input": "Portable Network Graphics",
        "output": "PNG"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "caesar-cipher",
    "description": "Implement a function that encrypts a message using the Caesar cipher technique, which involves shifting each letter of the alphabet by a specified number of places.",
    "examples": [
      {
        "input": "'ANTHONY', -3",
        "output": "XKQELKV"
      },
      {
        "input": "'JULIUS CAESAR', 3",
        "output": "MXOLXV FDHVDU"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "cakes-swerc-2020-2021",
    "description": "You need to determine the maximum number of cakes you can bake given a list of required ingredients per cake and the quantities of those ingredients you currently possess.",
    "examples": [
      {
        "input": "3\n100 500\n2 5\n70 1000",
        "output": "2"
      },
      {
        "input": "3\n100 50\n2 5\n70 1000",
        "output": "0"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "camel-case",
    "description": "Construct a function that converts a standard string into camelCase format, where all words except the first begin with a capital letter and are joined without spaces.",
    "examples": [
      {
        "input": "hello world",
        "output": "helloWorld"
      },
      {
        "input": "first name",
        "output": "firstName"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "consecutive-numbers",
    "description": "Design a function that identifies and returns all sequences of consecutive integers within a given list of numbers. The required length for a sequence to be considered 'consecutive' is given as the first input.",
    "examples": [
      {
        "input": "2\n5 ; 1 ; 2 ; 3 ; 8 ; -5 ; -4 ; 7",
        "output": "1 ; 2\n2 ; 3\n-5 ; -4"
      },
      {
        "input": "3\n5 ; 1 ; 2 ; 3 ; 8 ; -5 ; -4 ; 7",
        "output": "1 ; 2 ; 3"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "convert-number-from-base-to-another",
    "description": "Create a function capable of converting a given natural number from its initial base to a target base. The function should handle bases from 2 to 36, using digits 0-9 and then capital letters A-Z.",
    "examples": [
      {
        "input": "15\n10\n16",
        "output": "F"
      },
      {
        "input": "100000000\n2\n16",
        "output": "100"
      }
    ],
    "difficulty": "Medium"
  },
  {
    "title": "fibonacci",
    "description": "Your goal is to build a function that generates an array containing a specified quantity of Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.",
    "examples": [
      {
        "input": "8",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13]"
      },
      {
        "input": "14",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "find-closest-number",
    "description": "Given a list of integers and a separate target integer, your function must find and return the integer from the list that is numerically closest to the target.",
    "examples": [
      {
        "input": "given_number: 3\narray: [1, 2, 3, 4, 5, 6]",
        "output": "3"
      },
      {
        "input": "given_number: 0\narray: [7, -10, 13, 8, 4, -7, -12, -3, 3, -9, 6, -1, -6, 7]",
        "output": "-1"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "find-outlier-number",
    "description": "You're provided an array of integers that is composed almost entirely of either odd or even numbers, with the exception of one unique number. Your task is to write a function that identifies and returns this single outlier.",
    "examples": [
      {
        "input": "[2, 4, 0, 100, 4, 11, 2602, 36]",
        "output": "11"
      },
      {
        "input": "[160, 3, 1719, 19, 11, 13, -21]",
        "output": "160"
      }
    ],
    "difficulty": "Easy"
  },
  {
    "title": "first-non-repeating-character",
    "description": "Write a function to find the first character in a string that does not appear again in that string. If every character is repeated, the function should return an empty string.",
    "examples": [
      {
        "input": "'stress'",
        "output": "'t'"
      },
      {
        "input": "'aabbcc'",
        "output": "''"
      }
    ],
    "difficulty": "Easy"
  }
  //   {
  //     "title": "fizzbuzz",
  //     "description": "Write a program that print the numbers from 1 to `n` but:\n\n- if number is divisible by 3, print `Fizz`\n- if number is divisible by 5, print `Buzz`\n- if number is divisible by both 3 and 5, print `FizzBuzz`\n- otherwise print the number",
  //     "example": {
  //       "input": "5",
  //       "output": "1\n2\nFizz\n4\nBuzz"
  //     },
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "frequency-deviation",
  //     "description": "Given a string consisting of lowercase English letters, we define the frequency deviation of a substring as the difference between the maximum and the minimum frequencies of the characters in that substring.\n\nA substring of a string is formed by any contiguous segment of the string. For example, given \"bbacccc\", the character appearing most frequently is 'c' with $4$ occurrences. The character that appears the fewest times is 'a' with $1$ occurrence. The frequency deviation of the entire string is $4 - 1 = 3$.\n\nGiven a string, $s$, representing the input string, find the maximum possible frequency deviation of any of its substrings.",
  //     "example": {
  //       "input": "bbacccc",
  //       "output": "3"
  //     },
  //     "difficulty": "Hard"
  //   },
  //   {
  //     "title": "heap-algorithm",
  //     "description": "Write a program that generates all possible unique permutations of a string.\n\nThe order of the generated permutations is important, see the example below.",
  //     "example": {
  //       "input": "abc",
  //       "output": "abc\nbac\ncab\nacb\nbca\ncba"
  //     },
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "hello-world",
  //     "description": "Your function should return Hello depending of the parameter.",
  //     "example": null,
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "is-palindrome",
  //     "description": "The function should return `true` if a given string (case insensitive) is a palindrome and `false` if it's not the case.",
  //     "example": null,
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "is-prime-number",
  //     "description": "The function should return `true` if a given number is a prime number and `false` otherwise.",
  //     "example": null,
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "is-valid-array-subsequence",
  //     "description": "Given two non-empty arrays of integers, write a function that determines whether the second array is a subsequence of the first one.",
  //     "example": {
  //       "input": "5 1 22 25 6 -1 8 10\n1 6 -1 10",
  //       "output": "true"
  //     },
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "left-pad",
  //     "description": "Create a function that pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start (left) of the current string.",
  //     "example": {
  //       "input": "foo\n12\n-",
  //       "output": "---------foo"
  //     },
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "look-and-say-sequence-conway",
  //     "description": "Write a program that prints the next term of the **look-and-say sequence**.",
  //     "example": {
  //       "input": "11",
  //       "output": "21"
  //     },
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "maximum-subarray-sum",
  //     "description": "Given an array of `n` integers, find the contiguous subarray with the largest sum.",
  //     "example": {
  //       "input": "8\n-1\n2\n4\n-3\n5\n2\n-5\n2",
  //       "output": "10"
  //     },
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "offset-arrays",
  //     "description": "To settle the debate of 0-based vs 1-based indexing I have created a language where you must explicitly state the range of indices an array should have.\n\nFor example, given an array definition \"A[-1..1] = 1 2 3\", you would have:\n\n- A[-1] = 1\n- A[0] = 2\n- A[1] = 3\n\nYou are given a list of `n` array definitions and your job is to figure out what number is found in a given index `i` of an array `arr`. Note that the indexing operations may be nested (in the above example, A[A[-1]] would produce result 3).",
  //     "example": {
  //       "input": "3\nA[-1..1] = 1 2 3\nB[3..7] = 3 4 5 6 7\nC[-2..1] = 1 2 3 4\nA[0]",
  //       "output": "2"
  //     },
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "prefix-suffix",
  //     "description": "Write a programs that takes 2 strings (\"words\") and prints if one is a prefix/suffix of the other.",
  //     "example": {
  //       "input": "AlgoPy\nPy",
  //       "output": "false\ntrue"
  //     },
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "prime-numbers-decomposition",
  //     "description": "In mathematics, product decomposition of prime factors (also known as integer factorization into prime numbers) involves writing a strictly positive integer as a product of prime numbers.",
  //     "example": {
  //       "input": "32",
  //       "output": "2 * 2 * 2 * 2 * 2"
  //     },
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "print-pyramid",
  //     "description": "Display a pyramid of stars (`*`) whose height is given and in the right order (`normal` or `reverse`).",
  //     "example": null,
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "reverse-polish-notation",
  //     "description": "Your job is to create a calculator which evaluates expressions in Reverse Polish notation (a mathematical notation in which operators follow their operands. It does not need any parentheses as long as each operator has a fixed number of operands).",
  //     "example": null,
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "roman-numerals",
  //     "description": "The objective of this challenge is to create a function that translates a number into Roman numerals or the other way around.",
  //     "example": null,
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "rotate-2-dimensional-array-90-degrees",
  //     "description": "Given a square/rectangle matrix representing an image and a direction of rotation (`clockwise` or `anticlockwise`), rotate the image by 90 degrees.",
  //     "example": {
  //       "input": "clockwise\n1 2 3\n4 5 6\n7 8 9",
  //       "output": "7 4 1\n8 5 2\n9 6 3"
  //     },
  //     "difficulty": "Medium"
  //   },
  //   {
  //     "title": "single-number",
  //     "description": "Given a **non-empty** array of integers, every element appears twice except for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.",
  //     "example": {
  //       "input": "4\n1\n2\n1\n2",
  //       "output": "4"
  //     },
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "slugify",
  //     "description": "Write a function that generates a slug from a string.\n\nA Slug is the unique identifying part of a web address, typically at the end of the URL.\n\nThe rules for generating a slug are as follows (`kebab-case`):\n\n- Replace spaces with hyphens.\n- Remove all non-alphanumeric characters.",
  //     "example": {
  //       "input": "hello world",
  //       "output": "hello-world"
  //     },
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "sorting-algorithms",
  //     "description": "Write a function that takes a list of integers and sort them in ascending order.",
  //     "example": null,
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "sudoku",
  //     "description": "Write a program that solves the Sudoku given in input.\n\nThe empty cells are represented by 0.",
  //     "example": {
  //       "input": "5 3 0 0 7 0 0 0 0\n6 0 0 1 9 5 0 0 0\n0 9 8 0 0 0 0 6 0\n8 0 0 0 6 0 0 0 3\n4 0 0 8 0 3 0 0 1\n7 0 0 0 2 0 0 0 6\n0 6 0 0 0 0 2 8 0\n0 0 0 4 1 9 0 0 5\n0 0 0 0 8 0 0 7 9",
  //       "output": "5 3 4 6 7 8 9 1 2\n6 7 2 1 9 5 3 4 8\n1 9 8 3 4 2 5 6 7\n8 5 9 7 6 1 4 2 3\n4 2 6 8 5 3 7 9 1\n7 1 3 9 2 4 8 5 6\n9 6 1 5 3 7 2 8 4\n2 8 7 4 1 9 6 3 5\n3 4 5 2 8 6 1 7 9"
  //     },
  //     "difficulty": "Hard"
  //   },
  //   {
  //     "title": "triangle-type",
  //     "description": "Given the lengths of the 3 sides of a triangle, your function should return whether it is `equilateral`, `isosceles`, `scalene` or `impossible`.",
  //     "example": {
  //       "input": "- **Line 1 to 3:** The length of each side of the triangle",
  //       "output": null
  //     },
  //     "difficulty": "Easy"
  //   },
  //   {
  //     "title": "valid-parentheses",
  //     "description": "Given a string containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.",
  //     "example": {
  //       "input": "()",
  //       "output": "true"
  //     },
  //     "difficulty": "Easy"
  //   }
]
