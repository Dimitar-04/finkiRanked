[
  {
    "title": "a-phone-code",
    "description": "Your task is to calculate the length of the longest common starting sequence (prefix) among a list of phone numbers, which represents the city's phone code.",
    "examples": [
      {
        "input": "3\n007\n00123\n00124",
        "output": "2"
      },
      {
        "input": "4\n12345\n123\n123987\n123456",
        "output": "3"
      }
    ],
    "testcases": [
      {
        "input": "12\n5551234\n5551235\n5551236\n5551237\n5551238\n5551239\n5551240\n5551241\n5551242\n5551243\n5551244\n5551245",
        "output": "5"
      },
      {
        "input": "10\n9876543\n9876544\n9876545\n9876546\n9876547\n9876548\n9876549\n9876540\n9876541\n9876542",
        "output": "6"
      },
      {
        "input": "15\n4441111\n4442222\n4443333\n4444444\n4445555\n4446666\n4447777\n4448888\n4449999\n4440000\n4441234\n4445678\n4449012\n4443456\n4447890",
        "output": "3"
      },
      {
        "input": "11\n12345\n12346\n12347\n12348\n12349\n12340\n12341\n12342\n12343\n67890\n98765",
        "output": "0"
      },
      {
        "input": "14\n807123\n807124\n807125\n807126\n807127\n807128\n807129\n807130\n807131\n807132\n807133\n807134\n807135\n807136",
        "output": "4"
      },
      {
        "input": "10\n12345\n23456\n34567\n45678\n56789\n67890\n78901\n89012\n90123\n01234",
        "output": "0"
      },
      {
        "input": "13\n5551234567\n5551234568\n5551234569\n5551234560\n5551234561\n5551234562\n5551234563\n5551234564\n5551234565\n5551234566\n5551234577\n5551234588\n5551234599",
        "output": "8"
      },
      {
        "input": "15\n3141592653\n3141592654\n3141592655\n3141592656\n3141592657\n3141592658\n3141592659\n3141592650\n3141592651\n3141592652\n3141592660\n3141592661\n3141592662\n3141592663\n3141592664",
        "output": "8"
      },
      {
        "input": "12\n9998887770\n9998887771\n9998887772\n9998887773\n9998887774\n9998887775\n9998887776\n9998887777\n9998887778\n9998887779\n9998887780\n9998887781",
        "output": "8"
      },
      {
        "input": "10\n1111111111\n1111111112\n1111111113\n1111111114\n1111111115\n1111111116\n1111111117\n1111111118\n1111111119\n1111111110",
        "output": "9"
      }
    ],
    "difficulty": "Easy",
    "output_type": "integer"
  },
  {
    "title": "acronyms",
    "description": "Develop a function that takes a sentence and converts it into its acronym by taking the first letter of each word.",
    "examples": [
      {
        "input": "Programming Challenges is really cool",
        "output": "PCIRC"
      },
      {
        "input": "Portable Network Graphics",
        "output": "PNG"
      }
    ],
    "testcases": [
      {
        "input": "Powerful Networked Graphics solutions deliver exceptional visualization capabilities for complex three-dimensional renderings with advanced lighting models that simulate realistic surface properties while optimizing computational resources through sophisticated algorithms designed by leading experts in computer graphics rendering technology across multiple industrial applications.",
        "output": "PNGSDEVCCFTDRWALMTSRSPWOCRTSBALDEICRGTAMIA"
      },
      {
        "input": "Hypertext Transfer Markup Language fundamentally revolutionized digital communications by establishing standardized document formatting protocols that enable cross-platform compatibility across diverse operating systems while supporting embedded media elements alongside interactive scripting capabilities through comprehensive browser-based rendering engines that continuously evolve with advancing web technologies.",
        "output": "HTMLFRDCBESTDCPEDSMEISCTCBRETCEWT"
      },
      {
        "input": "furthermore yesterday's investigation revealed critical market intelligence suggesting significant downward trends affecting quarterly projections across multiple business units particularly within international divisions operating under regulatory constraints while domestic operations continue showing resilience despite supply chain disruptions affecting manufacturing capabilities throughout north american distribution networks.",
        "output": "FYIRCMISSDTAQPAMBUPWIDOURWDOCSRDSCDAMCTNDN"
      },
      {
        "input": " linguistic analysis through sophisticated computational models represents fundamental advancements in natural language processing techniques enabling accurate machine translation systems while improving contextual understanding of semantic relationships between complex sentence structures across multiple languages regardless of syntactic variations commonly encountered in diverse cultural expressions of human communication  ",
        "output": "LATSCMRFAINLPTEAMTSWICUOSRBCSSACMLROSVCEIDCEHC"
      },
      {
        "input": "modern software business works through integrated development environments utilizing continuous integration pipelines with automated testing frameworks that enhance code quality while reducing deployment times across distributed systems architectures supporting microservices implementations for scalable enterprise applications requiring minimal downtime during updates throughout production environments.",
        "output": "MSBWTIDEVUCIPWATFTECQWRDTADSASMIFSEARMDDUTE"
      },
      {
        "input": "Automated System Workflows dramatically improve organizational efficiency by streamlining repetitive business processes through intelligent routing mechanisms that distribute tasks according to established priority levels while monitoring completion metrics against predetermined benchmarks ensuring optimal resource allocation throughout departments regardless of geographical distribution across multiple international office locations.",
        "output": "ASWDIOEBSRBPTIRMTDTATEPLWMCMAPBESORTDROGDAMI"
      },
      {
        "input": "PHP: Hypertext Preprocessor remains remarkably relevant in modern web development ecosystems despite emerging alternatives because its extensive library ecosystem provides developers with battle-tested solutions for common challenges while maintaining backward compatibility across versions ensuring legacy applications continue functioning alongside newer implementations throughout evolving technology landscapes.",
        "output": "PHPRRIMWDEDAEBITELPDBTSCCWMBCAVELALCFANITEL"
      },
      {
        "input": "Fundamental Information Flow Operations represent critical architectural components in distributed computing systems where data sequencing maintains transactional integrity throughout asynchronous processing environments while preventing race conditions that could otherwise compromise system stability during peak operational periods requiring careful implementation considerations especially within memory-constrained embedded computing platforms.",
        "output": "FIFOERCACIDCSWTMTITAPEPRCTCOCSSPOPRCICCEWM"
      },
      {
        "input": "Accelerated System Architecture Processing technology delivers unprecedented computational throughput for data-intensive applications requiring real-time analysis of streaming information sources while maintaining exceptionally low latency responses necessary for mission-critical operations where millisecond delays could potentially result in significant financial implications or compromised safety protocols within industrial control systems.",
        "output": "ASAPTDUCTFDIARRTASISWMELLRNFMCWMDCPRIFSICPWIS"
      },
      {
        "input": "wireless wide networks 1st generation 2nd generation 3rd generation technologies evolved dramatically through decades of telecommunications research establishing foundations for modern connectivity paradigms while overcoming significant technical limitations through innovative spectrum utilization techniques alongside increasingly sophisticated modulation approaches that maximize data throughput within constrained bandwidth allocations supporting exponential growth in connected devices worldwide.",
        "output": "WWN123GETDTDOTREFMCPWOSTLTISUTALISMTWCBANNCE"
      }
    ],
    "difficulty": "Easy",
    "output_type": "string"
  },
  {
    "title": "caesar-cipher",
    "description": "Implement a function that encrypts a message using the Caesar cipher technique, which involves shifting each letter of the alphabet by a specified number of places.",
    "examples": [
      {
        "input": "'ANTHONY', -3",
        "output": "XKQELKV"
      },
      {
        "input": "'JULIUS CAESAR', 3",
        "output": "MXOLXV FDHVDU"
      }
    ],
    "testcases": [
      {
        "input": "'HELLO', 3",
        "output": "KHOOR"
      },
      {
        "input": "'XYZ', 3",
        "output": "ABC"
      },
      {
        "input": "'ABC', -3",
        "output": "XYZ"
      },
      {
        "input": "'The quick brown fox jumps over the lazy dog', 13",
        "output": "Gur dhvpx oebja sbk whzcf bire gur ynml qbt"
      },
      {
        "input": "'middle-Outz', 2",
        "output": "okffng-Qwvb"
      },
      {
        "input": "'No Change', 0",
        "output": "No Change"
      },
      {
        "input": "'Big shift!', 75",
        "output": "Elj vkliw!"
      },
      {
        "input": "'Negative Wrap!', -2",
        "output": "LcEXPLGTc YpYn!"
      },
      {
        "input": "'Veni, Vidi, Vici', -10",
        "output": "Ludq, Lsds, Lsgs"
      },
      {
        "input": "'All lowercase', 5",
        "output": "Fqq qtbjwhfxj"
      }
    ],
    "difficulty": "Easy",
    "output_type": "string"
  },
  {
    "title": "cakes",
    "description": "You need to determine the maximum number of cakes you can bake given a list of required ingredients per cake and the quantities of those ingredients you currently possess.Line 1: Single integer N for the number of ingredients. N next lines: One for each ingredient. Each of these lines contains two positive integers: the first one is the required quantity of this ingredient per cake, the second one is the quantity of this ingredient you have in your kitchen.",
    "examples": [
      {
        "input": "3\n100 500\n2 5\n70 1000",
        "output": "2"
      },
      {
        "input": "3\n100 50\n2 5\n70 1000",
        "output": "0"
      }
    ],
    "testcases": [
      {
        "input": "10\n2 20\n3 33\n5 100\n7 77\n11 121\n13 130\n17 170\n19 190\n23 230\n29 290",
        "output": "10"
      },
      {
        "input": "12\n1 1000\n2 2000\n3 3000\n4 4000\n5 5000\n6 6000\n7 7000\n8 8000\n9 9000\n10 10000\n11 11000\n12 12000",
        "output": "83"
      },
      {
        "input": "15\n100 1000\n200 1500\n300 900\n400 800\n500 2500\n600 3600\n700 4900\n800 6400\n900 8100\n1000 10000\n1100 12100\n1200 14400\n1300 16900\n1400 19600\n1500 22500",
        "output": "3"
      },
      {
        "input": "18\n5 100\n10 200\n15 300\n20 400\n25 500\n30 600\n35 700\n40 800\n45 900\n50 1000\n55 1100\n60 1200\n65 1300\n70 1400\n75 1500\n80 1600\n85 1700\n90 1800",
        "output": "20"
      },
      {
        "input": "14\n7 70\n14 140\n21 210\n28 280\n35 350\n42 420\n49 490\n56 560\n63 630\n70 700\n77 770\n84 840\n91 910\n98 980",
        "output": "10"
      },
      {
        "input": "11\n100 1000\n200 2000\n300 3000\n400 4000\n500 5000\n600 6000\n700 7000\n800 8000\n900 9000\n1000 10000\n1100 11000",
        "output": "10"
      },
      {
        "input": "13\n2 100\n3 150\n4 200\n5 250\n6 300\n7 350\n8 400\n9 450\n10 500\n11 550\n12 600\n13 650\n14 700",
        "output": "50"
      },
      {
        "input": "16\n1 100\n2 200\n3 300\n4 400\n5 500\n6 600\n7 700\n8 800\n9 900\n10 1000\n11 1100\n12 1200\n13 1300\n14 1400\n15 1500\n16 1600",
        "output": "100"
      },
      {
        "input": "17\n10 100\n20 200\n30 300\n40 400\n50 500\n60 600\n70 700\n80 800\n90 900\n100 1000\n110 1100\n120 1200\n130 1300\n140 1400\n150 1500\n160 1600\n170 1700",
        "output": "10"
      },
      {
        "input": "20\n1 1000\n2 2000\n3 3000\n4 4000\n5 5000\n6 6000\n7 7000\n8 8000\n9 9000\n10 10000\n11 11000\n12 12000\n13 13000\n14 14000\n15 15000\n16 16000\n17 17000\n18 18000\n19 19000\n20 20000",
        "output": "50"
      }
    ],
    "difficulty": "Easy",
    "output_type": "integer"
  },

  {
    "title": "consecutive-numbers",
    "description": "Design a function that identifies and returns all sequences of consecutive integers within a given list of numbers. The required length for a sequence to be considered 'consecutive' is given as the first input. Note that output sequences can contain numbers which are not consecutive in the input list",
    "examples": [
      {
        "input": "2\n5 ; 1 ; 2 ; 3 ; 8 ; -5 ; -4 ; 7",
        "output": "1 ; 2\n2 ; 3\n-5 ; -4"
      },
      {
        "input": "3\n5 ; 1 ; 2 ; 3 ; 8 ; -5 ; -4 ; 7",
        "output": "1 ; 2 ; 3"
      }
    ],
    "testcases": [
      {
        "input": "3\n10 1 5 2 6 3 7 4 8",
        "output": "1 2 3\n2 3 4\n3 4 5\n4 5 6\n5 6 7\n6 7 8"
      },
      {
        "input": "4\n-5 0 -4 1 -3 2 -2 3 -1",
        "output": "-5 -4 -3 -2\n-4 -3 -2 -1\n-3 -2 -1 0\n-2 -1 0 1\n-1 0 1 2\n0 1 2 3"
      },
      {
        "input": "2\n100 50 101 51 102 52 103",
        "output": "50 51\n51 52\n100 101\n101 102\n102 103"
      },
      {
        "input": "5\n20 1 19 2 18 3 17 4 16 5 15",
        "output": "1 2 3 4 5\n15 16 17 18 19\n16 17 18 19 20"
      },
      {
        "input": "3\n0 10 -1 9 -2 8 -3 7 -4 6 -5",
        "output": "-5 -4 -3\n-4 -3 -2\n-3 -2 -1\n6 7 8\n7 8 9\n8 9 10"
      },
      {
        "input": "4\n7 1 8 2 9 3 10 4 11 5 12 6",
        "output": "1 2 3 4\n2 3 4 5\n3 4 5 6\n7 8 9 10\n8 9 10 11\n9 10 11 12"
      },
      {
        "input": "2\n1 10 2 9 3 8 4 7 5 6",
        "output": "1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10"
      },
      {
        "input": "6\n-10 0 -9 1 -8 2 -7 3 -6 4 -5 5 -4",
        "output": "-10 -9 -8 -7 -6 -5\n-9 -8 -7 -6 -5 -4\n0 1 2 3 4 5"
      },
      {
        "input": "3\n50 40 30 51 41 31 52 42 32 53 43 33",
        "output": "30 31 32\n31 32 33\n40 41 42\n41 42 43\n50 51 52\n51 52 53"
      },
      {
        "input": "4\n15 1 14 2 13 3 12 4 11 5 10 6 9 7 8",
        "output": "1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n5 6 7 8\n6 7 8 9\n7 8 9 10\n8 9 10 11\n9 10 11 12\n10 11 12 13\n11 12 13 14\n12 13 14 15"
      }
    ],
    "difficulty": "Medium",
    "output_type": "string"
  },

  {
    "title": "fibonacci",
    "description": "Your goal is to build a function that generates an array containing a specified quantity of Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.",
    "examples": [
      {
        "input": "8",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13]"
      },
      {
        "input": "14",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]"
      }
    ],
    "testcases": [
      {
        "input": "25",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]"
      },
      {
        "input": "30",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]"
      },
      {
        "input": "18",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]"
      },
      {
        "input": "22",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]"
      },
      {
        "input": "35",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]"
      },
      {
        "input": "12",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]"
      },
      {
        "input": "28",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418]"
      },
      {
        "input": "16",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]"
      },
      {
        "input": "33",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309]"
      },
      {
        "input": "19",
        "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]"
      }
    ],
    "difficulty": "Easy",
    "output_type": "array"
  },

  {
    "title": "first-non-repeating-character",
    "description": "Write a function to find the first character in a string that does not appear again in that string. If every character is repeated, the function should return an empty string.",
    "examples": [
      {
        "input": "'stress'",
        "output": "'t'"
      },
      {
        "input": "'aabbcce'",
        "output": "'e'"
      }
    ],
    "testcases": [
      {
        "input": "'abacabadabacabadabacabaeabacabadabacabadabacabadabacabad'",
        "output": "'e'"
      },
      {
        "input": "'abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxy1z'",
        "output": "'1'"
      },
      {
        "input": "'thequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogx'",
        "output": "'x'"
      },
      {
        "input": "'aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzabcdefghijklmnopqrstuvwxyz'",
        "output": "'a'"
      },
      {
        "input": "'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyx'",
        "output": "'x'"
      },
      {
        "input": "'1bcdefghijklmnopqrstuvwxyzaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz'",
        "output": "'1'"
      },
      {
        "input": "'abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcf'",
        "output": "'f'"
      },
      {
        "input": "'qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmz'",
        "output": "'z'"
      },
      {
        "input": "'xxyyzzwwvvuuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaa1'",
        "output": "'1'"
      },
      {
        "input": "'mnbvcxzlkjhgfdsapoiuytrewqmnbvcxzlkjhgfdsapoiuytrewqx'",
        "output": "'x'"
      }
    ],
    "difficulty": "Medium",
    "output_type": "string"
  },
  {
    "title": "fizzbuzz",
    "description": "Write a program that prints the numbers from 1 to `n` but:\n\n- if number is divisible by 3, print `Fizz`\n- if number is divisible by 5, print `Buzz`\n- if number is divisible by both 3 and 5, print `FizzBuzz`\n- otherwise print the number",
    "examples": [
      {
        "input": "5",
        "output": "1\n2\nFizz\n4\nBuzz"
      },
      {
        "input": "15",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz"
      }
    ],
    "testcases": [
      {
        "input": "80",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz"
      },
      {
        "input": "85",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz"
      },
      {
        "input": "90",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz"
      },
      {
        "input": "95",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz"
      },
      {
        "input": "100",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz\nBuzz"
      },
      {
        "input": "82",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz"
      },
      {
        "input": "87",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz"
      },
      {
        "input": "92",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92"
      },
      {
        "input": "97",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97"
      },
      {
        "input": "99",
        "output": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\nFizz\n22\n23\nFizz\nBuzz\n26\nFizz\n28\n29\nFizzBuzz\n31\n32\nFizz\n34\nBuzz\nFizz\n37\n38\nFizz\nBuzz\n41\nFizz\n43\n44\nFizzBuzz\n46\n47\nFizz\n49\nBuzz\nFizz\n52\n53\nFizz\nBuzz\n56\nFizz\n58\n59\nFizzBuzz\n61\n62\nFizz\n64\nBuzz\nFizz\n67\n68\nFizz\nBuzz\n71\nFizz\n73\n74\nFizzBuzz\n76\n77\nFizz\n79\nBuzz\nFizz\n82\n83\nFizz\nBuzz\n86\nFizz\n88\n89\nFizzBuzz\n91\n92\nFizz\n94\nBuzz\nFizz\n97\n98\nFizz"
      }
    ],
    "difficulty": "Easy",
    "output_type": "string"
  },
  {
    "title": "frequency-deviation",
    "description": "Given a string consisting of lowercase English letters, we define the frequency deviation of a substring as the difference between the maximum and the minimum frequencies of the characters in that substring.\n\nA substring of a string is formed by any contiguous segment of the string. For example, given \"bbacccc\", the character appearing most frequently is 'c' with $4$ occurrences. The character that appears the fewest times is 'a' with $1$ occurrence. The frequency deviation of the entire string is $4 - 1 = 3$.\n\nGiven a string, $s$, representing the input string, find the maximum possible frequency deviation of any of its substrings.",
    "examples": [
      {
        "input": "bbacccc",
        "output": "3"
      },
      {
        "input": "aabbcc",
        "output": "1"
      }
    ],
    "testcases": [
      {
        "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc",
        "output": "39"
      },
      {
        "input": "cccccccccccccccccccccccccccccccccccccccccccccbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "output": "44"
      },
      {
        "input": "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccccccccccccccccccccddddd",
        "output": "29"
      },
      {
        "input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbcccccccccccccdddddddddd",
        "output": "49"
      },
      {
        "input": "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeebbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaacccccddddd",
        "output": "34"
      },
      {
        "input": "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbbbbbbbbbbaaaaaaaaaadddddddddd",
        "output": "59"
      },
      {
        "input": "aaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeee",
        "output": "19"
      },
      {
        "input": "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaccccccccccccccccccccddddddddddeeeee",
        "output": "54"
      },
      {
        "input": "ddddddddddddddddddddddddddddddddddddddddbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacee",
        "output": "39"
      },
      {
        "input": "aaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccccddddddddddddddddddddddddd",
        "output": "24"
      }
    ],
    "difficulty": "Hard",
    "output_type": "integer"
  },
  {
    "title": "heap-algorithm",
    "description": "Write a program that generates all possible unique permutations of a string.\n\nThe order of the generated permutations is important, see the example below.",
    "examples": [
      {
        "input": "abc",
        "output": "abc\nbac\ncab\nacb\nbca\ncba"
      },
      {
        "input": "ab",
        "output": "ab\nba"
      }
    ],
    "testcases": [
      {
        "input": "abcd",
        "output": "abcd\nbacd\ncbad\nacbd\nbcad\ncabd\nabdc\nbadc\ncbda\nacdb\nbcda\ncdab\nadcb\nbdca\ncdba\nadbc\nbdac\ncadb\ndabc\ndbac\ndcba\nadcb\nbdca\ncdab"
      },
      {
        "input": "efgh",
        "output": "efgh\nfegh\nhgef\ngefh\nfgeh\nhgei\nefhg\nfehg\nhgei\ngehf\nfheg\nhgef\neghf\nfegh\nhgef\ngefh\nfgeh\nhgei\nefgh\nfegh\nhgef\ngefh\nfgeh\nhgei"
      },
      {
        "input": "abcde",
        "output": "abcde\nbacde\ncbade\nacbde\nbcade\ncabde\nabced\nbaced\ncbaed\nacbed\nbcaed\ncbaed\nabecd\nbaecd\ncbead\nacebd\nbcead\ncbead\nabedc\nbaedc\ncbeda\nacedb\nbceda\ncedab"
      },
      {
        "input": "fghi",
        "output": "fghi\ngfhi\nhfgi\nifgh\ngfih\nhgif\nifgh\nfigh\nhfgi\ngfih\nhgif\nifgh\nfihg\ngifh\nhigf\nifhg\ngifh\nhigf\nfghi\ngfhi\nhfgi\nifgh\ngfih\nhgif"
      },
      {
        "input": "xyz",
        "output": "xyz\nyzx\nzxy\nxzy\nyzx\nzyx"
      },
      {
        "input": "pqrst",
        "output": "pqrst\nqp.rst\nrpqst\nspqrt\ntpqrs\nqprst\nrpqts\nsprqt\ntprqs\npqrts\nrqpst\nsqprt\ntpqrs\npqsrt\nrqspt\nsqrpt\ntqprs\npqrts\nrqpst\nsqprt\ntpqrs\nqprts\nrqpst\nsqprt"
      },
      {
        "input": "klmn",
        "output": "klmn\nlkmn\nmklm\nnklm\nlmkn\nmlkn\nnlkm\nkmln\nmklm\nlkmn\nmnlk\nnmlk\nknml\nlnkm\nmnkl\nnklm\nlmkn\nmlkn\nknlm\nlnkm\nmnkl\nnklm\nlmkn\nmlkn"
      },
      {
        "input": "uvwxy",
        "output": "uvwxy\nvuwxy\nwuvxy\nxuvwy\nyuvwx\nvuwxy\nwvuxy\nxvwuy\nyvwux\nuwvxy\nwuvxy\nxwuvy\nywuvx\nuxwvy\nwxuvy\nxuwvy\nyuwvx\nuywvx\nwyuvx\nxywuv\nyxwuv\nuyxwv\nwyxuv\nxywuv"
      },
      {
        "input": "rst",
        "output": "rst\nsrt\ntsr\nrts\nstr\ntrs"
      },
      {
        "input": "abcdef",
        "output": "abcdef\nbacdef\ncbadef\nacbdef\nbcadef\ncabdef\nabcedf\nbacedf\ncbaedf\nacbedf\nbcaedf\ncbaedf\nabecdf\nbaecdf\ncbeadf\nacebdf\nbceadf\ncbeadf\nabedcf\nbaedcf\ncbedaf\nacedbf\nbcedaf\ncedabf"
      }
    ],
    "difficulty": "Medium",
    "output_type": "string"
  },
  {
    "title": "look-and-say-sequence-conway",
    "description": "In mathematics, the look-and-say sequence is the sequence of integers beginning as follows: 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211... To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:\n11 is read off as 'one 1' or 11.\n 11 is read off as 'two 1s' or 21.\n 21  is read off as 'one 2, then one 1' or 1211.\n 1211  is read off as 'one 1, one 2, then two 1s' or 111221.\n 111221 is read off as 'three 1s, two 2s, then one 1' or 312211.Write a program that prints the next term of the look-and-say sequence.",
    "examples": [
      {
        "input": "11",
        "output": "21"
      },
      {
        "input": "1211",
        "output": "111221"
      }
    ],
    "testcases": [
      {
        "input
        "output": "3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "1321132132211331121321231231121121311221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "1321132132211331121321231231121121311221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "1113122113121113222123211211131211121311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "1113122113121113222123211211131211121311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "1321132132211331121321231231121121311221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "1321132132211331121321231231121121311221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "1113122113121113222123211211131211121311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "1113122113121113222123211211131211121311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "1321132132211331121321231231121121311221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "1321132132211331121321231231121121311221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "1113122113121113222123211211131211121311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      },
      {
        "input": "1113122113121113222123211211131211121311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221",
        "output": "3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112132113211321321123123211311222112111312211311123113321112132113211332112111312211311123113321112132113211332211213211322311211131221131112311311222113111231133211321123113112221133112132123123112111311222112132113211321322112311311222113311213212322211231131122211311123113321112132113211312311211131221"
      }
    ],
    "difficulty": "Medium",
    "output_type": "string"
  }
]
